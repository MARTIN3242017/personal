<?xml version="1.0" encoding="utf-8" ?>
<configuration>
    <springProperty scope="context" name="logPath" source="logback.log_path"/>
    <springProperty scope="context" name="level" source="logback.level"/>
    <!-- 自定义颜色（文件底部有对应自定义颜色处理类的代码） -->
    <conversionRule conversionWord="custom" converterClass="com.samh.common.config.LogbackColourConfig"/>

    <property name="LOG_PATH" value="${logPath}"/>

    <springProperty scope="context" name="appName" source="spring.application.name"/>

    <!-- appender 用来定义一个写日志的组件 分为：
     ConsoleAppender（控制台）
     RollingFileAppender（日志文件） -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <!--encoder 负责把事件解码成文字输出 class默认PatternLayoutEncoder
        具体的输出模板由pattern标签指定 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 这里有输出请求进来带有的requestId，在日常开发中，多个系统互相调用
             单次调用带上一个唯一的requestId，便于排查错误的时候日志跟踪-->
            <pattern>
                <!-- [%d{yyyy-MM-dd HH:mm:ss.SSS}]|%p|${appName}|%X{uuid}|%X{serialNumber}|%thread|#%X{mark}:%msg %n-->
                %green([%d{yyyy-MM-dd HH:mm:ss.SSS}]) [${appName}] [%thread] %custom(%5level) %msg%n
            </pattern>
        </encoder>
    </appender>

    <!-- 输出INFO级别的日志，指定INFO级别日志输出文件的位置 -->
    <appender name="INFO_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--INFO日志文件的绝对路径-->
        <file>${LOG_PATH}total-log-info.log</file>
        <!--设置生成新文件的触发条件 50MB -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}log-info.%d{yyyy-MM-dd}.%i.logx</fileNamePattern>
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>
                %green([%d{yyyy-MM-dd HH:mm:ss.SSS}]) [${appName}] [%thread] %custom(%5level) %msg%n
            </pattern>
        </encoder>

        <!-- 过滤器 不同级别的日志输出到不同的日志文件中-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--拦截级别-->
            <level>INFO</level>
            <!--ACCEPT 命中日志会被立即处理，不再经过剩余过滤器-->
            <onMatch>ACCEPT</onMatch>
            <!--DENY 未命中日志将立即被抛弃，不再经过其他过滤器-->
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>

    <!-- 输出ERROR级别的日志，指定INFO级别日志输出文件的位置 -->
    <appender name="ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH}total-log-error.log</file>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>
                %green([%d{yyyy-MM-dd HH:mm:ss.SSS}]) [${appName}] [%thread] %custom(%5level) %msg%n
            </pattern>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}log-error.%d{yyyy-MM-dd}.%i.logx</fileNamePattern>
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>
    </appender>
    <!-- 指定项目中某个包，当有日志操作行为时的日志记录级别 -->
    <!-- 也就是只要是发生在这个根包下面的所有日志操作行为的权限都是DEBUG -->
    <!-- 级别依次为【从高到低】：FATAL > ERROR > WARN > INFO > DEBUG > TRACE  -->
    <logger level="${level}" name="com.samh.*.mapper" additivity="false">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="INFO_LOG"/>
    </logger>

    <!-- 配置打印sql语句 -->
    <logger level="DEBUG" name="com.samh.*.mapper">
        <appender-ref ref="CONSOLE"/>
    </logger>

    <root level="${level}">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="INFO_LOG"/>
        <appender-ref ref="ERROR_LOG"/>
    </root>

</configuration>